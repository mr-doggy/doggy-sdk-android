/**
 * Doggy API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.mrdoggyapp.doggyapi.apis

import com.mrdoggyapp.doggyapi.models.CreateUpdateTodoDto
import com.mrdoggyapp.doggyapi.models.RemoteServiceErrorResponse
import com.mrdoggyapp.doggyapi.models.TodoDto
import com.mrdoggyapp.doggyapi.models.TodoDtoPagedResultDto

import com.mrdoggyapp.doggyapi.infrastructure.ApiClient
import com.mrdoggyapp.doggyapi.infrastructure.ClientException
import com.mrdoggyapp.doggyapi.infrastructure.ClientError
import com.mrdoggyapp.doggyapi.infrastructure.ServerException
import com.mrdoggyapp.doggyapi.infrastructure.ServerError
import com.mrdoggyapp.doggyapi.infrastructure.MultiValueMap
import com.mrdoggyapp.doggyapi.infrastructure.RequestConfig
import com.mrdoggyapp.doggyapi.infrastructure.RequestMethod
import com.mrdoggyapp.doggyapi.infrastructure.ResponseType
import com.mrdoggyapp.doggyapi.infrastructure.Success
import com.mrdoggyapp.doggyapi.infrastructure.toMultiValue

class TodoApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty("com.mrdoggyapp.doggyapi.baseUrl", "http://localhost")
        }
    }

    /**
    * 
    * 
    * @param searchKey  (optional)
    * @param isDone  (optional)
    * @param tagId  (optional)
    * @param maxResultCount  (optional)
    * @param parentId  (optional)
    * @param isExpired  (optional)
    * @param sorting  (optional)
    * @param skipCount  (optional)
    * @return TodoDtoPagedResultDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiAppTodoGet(searchKey: kotlin.String?, isDone: kotlin.Boolean?, tagId: java.util.UUID?, maxResultCount: kotlin.Int?, parentId: java.util.UUID?, isExpired: kotlin.Boolean?, sorting: kotlin.String?, skipCount: kotlin.Int?) : TodoDtoPagedResultDto {
        val localVariableConfig = apiAppTodoGetRequestConfig(searchKey = searchKey, isDone = isDone, tagId = tagId, maxResultCount = maxResultCount, parentId = parentId, isExpired = isExpired, sorting = sorting, skipCount = skipCount)

        val localVarResponse = request<Unit, TodoDtoPagedResultDto>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as TodoDtoPagedResultDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation apiAppTodoGet
    *
    * @param searchKey  (optional)
    * @param isDone  (optional)
    * @param tagId  (optional)
    * @param maxResultCount  (optional)
    * @param parentId  (optional)
    * @param isExpired  (optional)
    * @param sorting  (optional)
    * @param skipCount  (optional)
    * @return RequestConfig
    */
    fun apiAppTodoGetRequestConfig(searchKey: kotlin.String?, isDone: kotlin.Boolean?, tagId: java.util.UUID?, maxResultCount: kotlin.Int?, parentId: java.util.UUID?, isExpired: kotlin.Boolean?, sorting: kotlin.String?, skipCount: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (searchKey != null) {
                    put("SearchKey", listOf(searchKey.toString()))
                }
                if (isDone != null) {
                    put("IsDone", listOf(isDone.toString()))
                }
                if (tagId != null) {
                    put("TagId", listOf(tagId.toString()))
                }
                if (maxResultCount != null) {
                    put("MaxResultCount", listOf(maxResultCount.toString()))
                }
                if (parentId != null) {
                    put("ParentId", listOf(parentId.toString()))
                }
                if (isExpired != null) {
                    put("IsExpired", listOf(isExpired.toString()))
                }
                if (sorting != null) {
                    put("Sorting", listOf(sorting.toString()))
                }
                if (skipCount != null) {
                    put("SkipCount", listOf(skipCount.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/app/todo",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param id  
    * @return void
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiAppTodoIdDelete(id: java.util.UUID) : Unit {
        val localVariableConfig = apiAppTodoIdDeleteRequestConfig(id = id)

        val localVarResponse = request<Unit, Unit>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation apiAppTodoIdDelete
    *
    * @param id  
    * @return RequestConfig
    */
    fun apiAppTodoIdDeleteRequestConfig(id: java.util.UUID) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/app/todo/{id}".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param id  
    * @return TodoDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiAppTodoIdGet(id: java.util.UUID) : TodoDto {
        val localVariableConfig = apiAppTodoIdGetRequestConfig(id = id)

        val localVarResponse = request<Unit, TodoDto>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as TodoDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation apiAppTodoIdGet
    *
    * @param id  
    * @return RequestConfig
    */
    fun apiAppTodoIdGetRequestConfig(id: java.util.UUID) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/app/todo/{id}".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param id  
    * @param createUpdateTodoDto  (optional)
    * @return TodoDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiAppTodoIdPut(id: java.util.UUID, createUpdateTodoDto: CreateUpdateTodoDto?) : TodoDto {
        val localVariableConfig = apiAppTodoIdPutRequestConfig(id = id, createUpdateTodoDto = createUpdateTodoDto)

        val localVarResponse = request<CreateUpdateTodoDto, TodoDto>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as TodoDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation apiAppTodoIdPut
    *
    * @param id  
    * @param createUpdateTodoDto  (optional)
    * @return RequestConfig
    */
    fun apiAppTodoIdPutRequestConfig(id: java.util.UUID, createUpdateTodoDto: CreateUpdateTodoDto?) : RequestConfig<CreateUpdateTodoDto> {
        val localVariableBody = createUpdateTodoDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/app/todo/{id}".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param createUpdateTodoDto  (optional)
    * @return TodoDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiAppTodoPost(createUpdateTodoDto: CreateUpdateTodoDto?) : TodoDto {
        val localVariableConfig = apiAppTodoPostRequestConfig(createUpdateTodoDto = createUpdateTodoDto)

        val localVarResponse = request<CreateUpdateTodoDto, TodoDto>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as TodoDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation apiAppTodoPost
    *
    * @param createUpdateTodoDto  (optional)
    * @return RequestConfig
    */
    fun apiAppTodoPostRequestConfig(createUpdateTodoDto: CreateUpdateTodoDto?) : RequestConfig<CreateUpdateTodoDto> {
        val localVariableBody = createUpdateTodoDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/app/todo",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
