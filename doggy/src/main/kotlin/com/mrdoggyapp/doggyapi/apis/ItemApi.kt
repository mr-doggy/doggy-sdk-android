/**
 * Doggy API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.mrdoggyapp.doggyapi.apis

import com.mrdoggyapp.doggyapi.models.CreateUpdateItemDto
import com.mrdoggyapp.doggyapi.models.ItemDto
import com.mrdoggyapp.doggyapi.models.ItemDtoPagedResultDto
import com.mrdoggyapp.doggyapi.models.ItemType
import com.mrdoggyapp.doggyapi.models.RemoteServiceErrorResponse
import com.mrdoggyapp.doggyapi.models.SpecialItemDto

import com.mrdoggyapp.doggyapi.infrastructure.ApiClient
import com.mrdoggyapp.doggyapi.infrastructure.ClientException
import com.mrdoggyapp.doggyapi.infrastructure.ClientError
import com.mrdoggyapp.doggyapi.infrastructure.ServerException
import com.mrdoggyapp.doggyapi.infrastructure.ServerError
import com.mrdoggyapp.doggyapi.infrastructure.MultiValueMap
import com.mrdoggyapp.doggyapi.infrastructure.RequestConfig
import com.mrdoggyapp.doggyapi.infrastructure.RequestMethod
import com.mrdoggyapp.doggyapi.infrastructure.ResponseType
import com.mrdoggyapp.doggyapi.infrastructure.Success
import com.mrdoggyapp.doggyapi.infrastructure.toMultiValue

class ItemApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty("com.mrdoggyapp.doggyapi.baseUrl", "http://localhost")
        }
    }

    /**
    * 
    * 
    * @param parentItemId  (optional)
    * @param searchKey  (optional)
    * @param name  (optional)
    * @param types  (optional)
    * @param extension  (optional)
    * @param contentType  (optional)
    * @param tagId  (optional)
    * @param maxResultCount  (optional)
    * @param sorting  (optional)
    * @param skipCount  (optional)
    * @return ItemDtoPagedResultDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiAppItemGet(parentItemId: java.util.UUID?, searchKey: kotlin.String?, name: kotlin.String?, types: kotlin.collections.List<ItemType>?, extension: kotlin.String?, contentType: kotlin.String?, tagId: java.util.UUID?, maxResultCount: kotlin.Int?, sorting: kotlin.String?, skipCount: kotlin.Int?) : ItemDtoPagedResultDto {
        val localVariableConfig = apiAppItemGetRequestConfig(parentItemId = parentItemId, searchKey = searchKey, name = name, types = types, extension = extension, contentType = contentType, tagId = tagId, maxResultCount = maxResultCount, sorting = sorting, skipCount = skipCount)

        val localVarResponse = request<Unit, ItemDtoPagedResultDto>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ItemDtoPagedResultDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation apiAppItemGet
    *
    * @param parentItemId  (optional)
    * @param searchKey  (optional)
    * @param name  (optional)
    * @param types  (optional)
    * @param extension  (optional)
    * @param contentType  (optional)
    * @param tagId  (optional)
    * @param maxResultCount  (optional)
    * @param sorting  (optional)
    * @param skipCount  (optional)
    * @return RequestConfig
    */
    fun apiAppItemGetRequestConfig(parentItemId: java.util.UUID?, searchKey: kotlin.String?, name: kotlin.String?, types: kotlin.collections.List<ItemType>?, extension: kotlin.String?, contentType: kotlin.String?, tagId: java.util.UUID?, maxResultCount: kotlin.Int?, sorting: kotlin.String?, skipCount: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (parentItemId != null) {
                    put("ParentItemId", listOf(parentItemId.toString()))
                }
                if (searchKey != null) {
                    put("SearchKey", listOf(searchKey.toString()))
                }
                if (name != null) {
                    put("Name", listOf(name.toString()))
                }
                if (types != null) {
                    put("Types", toMultiValue(types.toList(), "multi"))
                }
                if (extension != null) {
                    put("Extension", listOf(extension.toString()))
                }
                if (contentType != null) {
                    put("ContentType", listOf(contentType.toString()))
                }
                if (tagId != null) {
                    put("TagId", listOf(tagId.toString()))
                }
                if (maxResultCount != null) {
                    put("MaxResultCount", listOf(maxResultCount.toString()))
                }
                if (sorting != null) {
                    put("Sorting", listOf(sorting.toString()))
                }
                if (skipCount != null) {
                    put("SkipCount", listOf(skipCount.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/app/item",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param id  
    * @return void
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiAppItemIdDelete(id: java.util.UUID) : Unit {
        val localVariableConfig = apiAppItemIdDeleteRequestConfig(id = id)

        val localVarResponse = request<Unit, Unit>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation apiAppItemIdDelete
    *
    * @param id  
    * @return RequestConfig
    */
    fun apiAppItemIdDeleteRequestConfig(id: java.util.UUID) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/app/item/{id}".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param id  
    * @return ItemDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiAppItemIdGet(id: java.util.UUID) : ItemDto {
        val localVariableConfig = apiAppItemIdGetRequestConfig(id = id)

        val localVarResponse = request<Unit, ItemDto>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ItemDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation apiAppItemIdGet
    *
    * @param id  
    * @return RequestConfig
    */
    fun apiAppItemIdGetRequestConfig(id: java.util.UUID) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/app/item/{id}".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param id  
    * @param createUpdateItemDto  (optional)
    * @return ItemDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiAppItemIdPut(id: java.util.UUID, createUpdateItemDto: CreateUpdateItemDto?) : ItemDto {
        val localVariableConfig = apiAppItemIdPutRequestConfig(id = id, createUpdateItemDto = createUpdateItemDto)

        val localVarResponse = request<CreateUpdateItemDto, ItemDto>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ItemDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation apiAppItemIdPut
    *
    * @param id  
    * @param createUpdateItemDto  (optional)
    * @return RequestConfig
    */
    fun apiAppItemIdPutRequestConfig(id: java.util.UUID, createUpdateItemDto: CreateUpdateItemDto?) : RequestConfig<CreateUpdateItemDto> {
        val localVariableBody = createUpdateItemDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/app/item/{id}".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param createUpdateItemDto  (optional)
    * @return ItemDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiAppItemPost(createUpdateItemDto: CreateUpdateItemDto?) : ItemDto {
        val localVariableConfig = apiAppItemPostRequestConfig(createUpdateItemDto = createUpdateItemDto)

        val localVarResponse = request<CreateUpdateItemDto, ItemDto>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ItemDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation apiAppItemPost
    *
    * @param createUpdateItemDto  (optional)
    * @return RequestConfig
    */
    fun apiAppItemPostRequestConfig(createUpdateItemDto: CreateUpdateItemDto?) : RequestConfig<CreateUpdateItemDto> {
        val localVariableBody = createUpdateItemDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/app/item",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @return SpecialItemDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiAppItemSpecialItemsGet() : SpecialItemDto {
        val localVariableConfig = apiAppItemSpecialItemsGetRequestConfig()

        val localVarResponse = request<Unit, SpecialItemDto>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SpecialItemDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation apiAppItemSpecialItemsGet
    *
    * @return RequestConfig
    */
    fun apiAppItemSpecialItemsGetRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/app/item/special-items",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
