/**
 * Doggy API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.mrdoggyapp.doggyapi.apis

import com.mrdoggyapp.doggyapi.models.BooleanKeyValue
import com.mrdoggyapp.doggyapi.models.BooleanSetKeyValueDto
import com.mrdoggyapp.doggyapi.models.DateTimeKeyValue
import com.mrdoggyapp.doggyapi.models.DateTimeSetKeyValueDto
import com.mrdoggyapp.doggyapi.models.DecimalKeyValue
import com.mrdoggyapp.doggyapi.models.DecimalSetKeyValueDto
import com.mrdoggyapp.doggyapi.models.DoubleKeyValue
import com.mrdoggyapp.doggyapi.models.DoubleSetKeyValueDto
import com.mrdoggyapp.doggyapi.models.Int32KeyValue
import com.mrdoggyapp.doggyapi.models.Int32SetKeyValueDto
import com.mrdoggyapp.doggyapi.models.RemoteServiceErrorResponse
import com.mrdoggyapp.doggyapi.models.StringKeyValue
import com.mrdoggyapp.doggyapi.models.StringSetKeyValueDto

import com.mrdoggyapp.doggyapi.infrastructure.ApiClient
import com.mrdoggyapp.doggyapi.infrastructure.ClientException
import com.mrdoggyapp.doggyapi.infrastructure.ClientError
import com.mrdoggyapp.doggyapi.infrastructure.ServerException
import com.mrdoggyapp.doggyapi.infrastructure.ServerError
import com.mrdoggyapp.doggyapi.infrastructure.MultiValueMap
import com.mrdoggyapp.doggyapi.infrastructure.RequestConfig
import com.mrdoggyapp.doggyapi.infrastructure.RequestMethod
import com.mrdoggyapp.doggyapi.infrastructure.ResponseType
import com.mrdoggyapp.doggyapi.infrastructure.Success
import com.mrdoggyapp.doggyapi.infrastructure.toMultiValue

class KeyValueApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty("com.mrdoggyapp.doggyapi.baseUrl", "http://localhost")
        }
    }

    /**
    * 
    * 
    * @param key  (optional)
    * @return BooleanKeyValue
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiAppKeyValueBoolGet(key: kotlin.String?) : BooleanKeyValue {
        val localVariableConfig = apiAppKeyValueBoolGetRequestConfig(key = key)

        val localVarResponse = request<Unit, BooleanKeyValue>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as BooleanKeyValue
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation apiAppKeyValueBoolGet
    *
    * @param key  (optional)
    * @return RequestConfig
    */
    fun apiAppKeyValueBoolGetRequestConfig(key: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (key != null) {
                    put("key", listOf(key.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/app/key-value/bool",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param key  (optional)
    * @return DateTimeKeyValue
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiAppKeyValueDateTimeGet(key: kotlin.String?) : DateTimeKeyValue {
        val localVariableConfig = apiAppKeyValueDateTimeGetRequestConfig(key = key)

        val localVarResponse = request<Unit, DateTimeKeyValue>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DateTimeKeyValue
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation apiAppKeyValueDateTimeGet
    *
    * @param key  (optional)
    * @return RequestConfig
    */
    fun apiAppKeyValueDateTimeGetRequestConfig(key: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (key != null) {
                    put("key", listOf(key.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/app/key-value/date-time",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param key  (optional)
    * @return DecimalKeyValue
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiAppKeyValueDecimalGet(key: kotlin.String?) : DecimalKeyValue {
        val localVariableConfig = apiAppKeyValueDecimalGetRequestConfig(key = key)

        val localVarResponse = request<Unit, DecimalKeyValue>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DecimalKeyValue
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation apiAppKeyValueDecimalGet
    *
    * @param key  (optional)
    * @return RequestConfig
    */
    fun apiAppKeyValueDecimalGetRequestConfig(key: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (key != null) {
                    put("key", listOf(key.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/app/key-value/decimal",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param key  (optional)
    * @return DoubleKeyValue
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiAppKeyValueDoubleGet(key: kotlin.String?) : DoubleKeyValue {
        val localVariableConfig = apiAppKeyValueDoubleGetRequestConfig(key = key)

        val localVarResponse = request<Unit, DoubleKeyValue>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DoubleKeyValue
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation apiAppKeyValueDoubleGet
    *
    * @param key  (optional)
    * @return RequestConfig
    */
    fun apiAppKeyValueDoubleGetRequestConfig(key: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (key != null) {
                    put("key", listOf(key.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/app/key-value/double",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param key  (optional)
    * @return Int32KeyValue
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiAppKeyValueIntGet(key: kotlin.String?) : Int32KeyValue {
        val localVariableConfig = apiAppKeyValueIntGetRequestConfig(key = key)

        val localVarResponse = request<Unit, Int32KeyValue>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Int32KeyValue
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation apiAppKeyValueIntGet
    *
    * @param key  (optional)
    * @return RequestConfig
    */
    fun apiAppKeyValueIntGetRequestConfig(key: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (key != null) {
                    put("key", listOf(key.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/app/key-value/int",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param key  (optional)
    * @param booleanSetKeyValueDto  (optional)
    * @return void
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiAppKeyValueSetBoolPost(key: kotlin.String?, booleanSetKeyValueDto: BooleanSetKeyValueDto?) : Unit {
        val localVariableConfig = apiAppKeyValueSetBoolPostRequestConfig(key = key, booleanSetKeyValueDto = booleanSetKeyValueDto)

        val localVarResponse = request<BooleanSetKeyValueDto, Unit>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation apiAppKeyValueSetBoolPost
    *
    * @param key  (optional)
    * @param booleanSetKeyValueDto  (optional)
    * @return RequestConfig
    */
    fun apiAppKeyValueSetBoolPostRequestConfig(key: kotlin.String?, booleanSetKeyValueDto: BooleanSetKeyValueDto?) : RequestConfig<BooleanSetKeyValueDto> {
        val localVariableBody = booleanSetKeyValueDto
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (key != null) {
                    put("key", listOf(key.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/app/key-value/set-bool",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param key  (optional)
    * @param dateTimeSetKeyValueDto  (optional)
    * @return void
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiAppKeyValueSetDateTimePost(key: kotlin.String?, dateTimeSetKeyValueDto: DateTimeSetKeyValueDto?) : Unit {
        val localVariableConfig = apiAppKeyValueSetDateTimePostRequestConfig(key = key, dateTimeSetKeyValueDto = dateTimeSetKeyValueDto)

        val localVarResponse = request<DateTimeSetKeyValueDto, Unit>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation apiAppKeyValueSetDateTimePost
    *
    * @param key  (optional)
    * @param dateTimeSetKeyValueDto  (optional)
    * @return RequestConfig
    */
    fun apiAppKeyValueSetDateTimePostRequestConfig(key: kotlin.String?, dateTimeSetKeyValueDto: DateTimeSetKeyValueDto?) : RequestConfig<DateTimeSetKeyValueDto> {
        val localVariableBody = dateTimeSetKeyValueDto
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (key != null) {
                    put("key", listOf(key.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/app/key-value/set-date-time",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param key  (optional)
    * @param decimalSetKeyValueDto  (optional)
    * @return void
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiAppKeyValueSetDecimalPost(key: kotlin.String?, decimalSetKeyValueDto: DecimalSetKeyValueDto?) : Unit {
        val localVariableConfig = apiAppKeyValueSetDecimalPostRequestConfig(key = key, decimalSetKeyValueDto = decimalSetKeyValueDto)

        val localVarResponse = request<DecimalSetKeyValueDto, Unit>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation apiAppKeyValueSetDecimalPost
    *
    * @param key  (optional)
    * @param decimalSetKeyValueDto  (optional)
    * @return RequestConfig
    */
    fun apiAppKeyValueSetDecimalPostRequestConfig(key: kotlin.String?, decimalSetKeyValueDto: DecimalSetKeyValueDto?) : RequestConfig<DecimalSetKeyValueDto> {
        val localVariableBody = decimalSetKeyValueDto
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (key != null) {
                    put("key", listOf(key.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/app/key-value/set-decimal",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param key  (optional)
    * @param doubleSetKeyValueDto  (optional)
    * @return void
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiAppKeyValueSetDoublePost(key: kotlin.String?, doubleSetKeyValueDto: DoubleSetKeyValueDto?) : Unit {
        val localVariableConfig = apiAppKeyValueSetDoublePostRequestConfig(key = key, doubleSetKeyValueDto = doubleSetKeyValueDto)

        val localVarResponse = request<DoubleSetKeyValueDto, Unit>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation apiAppKeyValueSetDoublePost
    *
    * @param key  (optional)
    * @param doubleSetKeyValueDto  (optional)
    * @return RequestConfig
    */
    fun apiAppKeyValueSetDoublePostRequestConfig(key: kotlin.String?, doubleSetKeyValueDto: DoubleSetKeyValueDto?) : RequestConfig<DoubleSetKeyValueDto> {
        val localVariableBody = doubleSetKeyValueDto
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (key != null) {
                    put("key", listOf(key.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/app/key-value/set-double",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param key  (optional)
    * @param int32SetKeyValueDto  (optional)
    * @return void
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiAppKeyValueSetIntPost(key: kotlin.String?, int32SetKeyValueDto: Int32SetKeyValueDto?) : Unit {
        val localVariableConfig = apiAppKeyValueSetIntPostRequestConfig(key = key, int32SetKeyValueDto = int32SetKeyValueDto)

        val localVarResponse = request<Int32SetKeyValueDto, Unit>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation apiAppKeyValueSetIntPost
    *
    * @param key  (optional)
    * @param int32SetKeyValueDto  (optional)
    * @return RequestConfig
    */
    fun apiAppKeyValueSetIntPostRequestConfig(key: kotlin.String?, int32SetKeyValueDto: Int32SetKeyValueDto?) : RequestConfig<Int32SetKeyValueDto> {
        val localVariableBody = int32SetKeyValueDto
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (key != null) {
                    put("key", listOf(key.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/app/key-value/set-int",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param key  (optional)
    * @param stringSetKeyValueDto  (optional)
    * @return void
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiAppKeyValueSetStringPost(key: kotlin.String?, stringSetKeyValueDto: StringSetKeyValueDto?) : Unit {
        val localVariableConfig = apiAppKeyValueSetStringPostRequestConfig(key = key, stringSetKeyValueDto = stringSetKeyValueDto)

        val localVarResponse = request<StringSetKeyValueDto, Unit>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation apiAppKeyValueSetStringPost
    *
    * @param key  (optional)
    * @param stringSetKeyValueDto  (optional)
    * @return RequestConfig
    */
    fun apiAppKeyValueSetStringPostRequestConfig(key: kotlin.String?, stringSetKeyValueDto: StringSetKeyValueDto?) : RequestConfig<StringSetKeyValueDto> {
        val localVariableBody = stringSetKeyValueDto
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (key != null) {
                    put("key", listOf(key.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/app/key-value/set-string",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param key  (optional)
    * @return StringKeyValue
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiAppKeyValueStringGet(key: kotlin.String?) : StringKeyValue {
        val localVariableConfig = apiAppKeyValueStringGetRequestConfig(key = key)

        val localVarResponse = request<Unit, StringKeyValue>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as StringKeyValue
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation apiAppKeyValueStringGet
    *
    * @param key  (optional)
    * @return RequestConfig
    */
    fun apiAppKeyValueStringGetRequestConfig(key: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (key != null) {
                    put("key", listOf(key.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/app/key-value/string",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
