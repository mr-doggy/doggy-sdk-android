/**
 * Doggy API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.mrdoggyapp.doggyapi.apis

import com.mrdoggyapp.doggyapi.models.AbpLoginResult
import com.mrdoggyapp.doggyapi.models.RemoteServiceErrorResponse
import com.mrdoggyapp.doggyapi.models.UserLoginInfo

import com.mrdoggyapp.doggyapi.infrastructure.ApiClient
import com.mrdoggyapp.doggyapi.infrastructure.ClientException
import com.mrdoggyapp.doggyapi.infrastructure.ClientError
import com.mrdoggyapp.doggyapi.infrastructure.ServerException
import com.mrdoggyapp.doggyapi.infrastructure.ServerError
import com.mrdoggyapp.doggyapi.infrastructure.MultiValueMap
import com.mrdoggyapp.doggyapi.infrastructure.RequestConfig
import com.mrdoggyapp.doggyapi.infrastructure.RequestMethod
import com.mrdoggyapp.doggyapi.infrastructure.ResponseType
import com.mrdoggyapp.doggyapi.infrastructure.Success
import com.mrdoggyapp.doggyapi.infrastructure.toMultiValue

class LoginApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty("com.mrdoggyapp.doggyapi.baseUrl", "http://localhost")
        }
    }

    /**
    * 
    * 
    * @param userLoginInfo  (optional)
    * @return AbpLoginResult
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiAccountCheckPasswordPost(userLoginInfo: UserLoginInfo?) : AbpLoginResult {
        val localVariableConfig = apiAccountCheckPasswordPostRequestConfig(userLoginInfo = userLoginInfo)

        val localVarResponse = request<UserLoginInfo, AbpLoginResult>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AbpLoginResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation apiAccountCheckPasswordPost
    *
    * @param userLoginInfo  (optional)
    * @return RequestConfig
    */
    fun apiAccountCheckPasswordPostRequestConfig(userLoginInfo: UserLoginInfo?) : RequestConfig<UserLoginInfo> {
        val localVariableBody = userLoginInfo
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/account/check-password",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param userLoginInfo  (optional)
    * @return AbpLoginResult
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiAccountLoginPost(userLoginInfo: UserLoginInfo?) : AbpLoginResult {
        val localVariableConfig = apiAccountLoginPostRequestConfig(userLoginInfo = userLoginInfo)

        val localVarResponse = request<UserLoginInfo, AbpLoginResult>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AbpLoginResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation apiAccountLoginPost
    *
    * @param userLoginInfo  (optional)
    * @return RequestConfig
    */
    fun apiAccountLoginPostRequestConfig(userLoginInfo: UserLoginInfo?) : RequestConfig<UserLoginInfo> {
        val localVariableBody = userLoginInfo
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/account/login",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @return void
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiAccountLogoutGet() : Unit {
        val localVariableConfig = apiAccountLogoutGetRequestConfig()

        val localVarResponse = request<Unit, Unit>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation apiAccountLogoutGet
    *
    * @return RequestConfig
    */
    fun apiAccountLogoutGetRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/account/logout",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
